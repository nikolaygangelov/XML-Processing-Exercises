using Newtonsoft.Json;
using ProductShop.Data;
using ProductShop.DTOs.Export;
using ProductShop.DTOs.Import;
using ProductShop.Models;
using System.Xml.Serialization;

namespace ProductShop
{
    public class StartUp
    {
        public static void Main()
        {

            ProductShopContext context = new ProductShopContext();

            Console.WriteLine(GetCategoriesByProductsCount(context);
        }

        public static string GetCategoriesByProductsCount(ProductShopContext context)
        {
        // using Data Transfer Object Class to map it with Categories
            XmlSerializer serializer = new XmlSerializer(typeof(CategoriesByProductsCountDTO[]), new XmlRootAttribute("Categories"));

            var xns = new XmlSerializerNamespaces();

        // one way to display empty namespace in resulted file
            xns.Add(string.Empty, string.Empty);

        // "using" automatically closes opened connections 
        // adding file location
            using var writer = new StreamWriter("categories-by-products.xml");

        // using identical properties in order to map successfully
            var categoriesByProdCount = context.Categories
              .Select(c => new CategoriesByProductsCountDTO
              {
                  Name = c.Name,
                  Count = c.CategoryProducts.Count,
                  AveragePrice = c.CategoryProducts.Average(p => p.Product.Price),
                  TotalRevenue = c.CategoryProducts.Sum(p => p.Product.Price)
              })
              .OrderByDescending(cp => cp.Count)
              .ThenBy(cp => cp.TotalRevenue)
              .ToArray();

        // Serialize method needs file, TextReader object and namespace to convert/map
            serializer.Serialize(writer, categoriesByProdCount, xns);

        // explicitly closing connection in terms of reaching edge cases
            writer.Close();

            return File.ReadAllText("categories-by-products.xml");
        }

    }
}
