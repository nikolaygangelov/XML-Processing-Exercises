using Newtonsoft.Json;
using ProductShop.Data;
using ProductShop.DTOs.Export;
using ProductShop.DTOs.Import;
using ProductShop.Models;
using System.Xml.Serialization;

namespace ProductShop
{
    public class StartUp
    {
        public static void Main()
        {

            ProductShopContext context = new ProductShopContext();

            Console.WriteLine(GetProductsInRange(context);
        }

        public static string GetProductsInRange(ProductShopContext context)
        {
        // using Data Transfer Object Class to map it with Products
            XmlSerializer serializer = new XmlSerializer(typeof(ExportProductsDTO[]), new XmlRootAttribute("Products"));

            var xns = new XmlSerializerNamespaces();

        // one way to display empty namespace in resulted file
            xns.Add(string.Empty, string.Empty);

        // "using" automatically closes opened connections 
        // adding file location
            using var writer = new StreamWriter("products-in-range.xml");

        // using identical properties in order to map successfully
            var productsInRange = context.Products
                .Where(p => p.Price >= 500 && p.Price <= 1000)
                .Select(p => new ExportProductsDTO
                {
                    Name = p.Name,
                    Price = p.Price,
                    Buyer = p.Buyer.FirstName + " " + p.Buyer.LastName
                })
                .OrderBy(p => p.Price)
                .Take(10)
                .ToArray();

        // Serialize method needs file, TextReader object and namespace to convert/map
            serializer.Serialize(writer, productsInRange, xns);

        // explicitly closing connection in terms of reaching edge cases
            writer.Close();

            return File.ReadAllText("products-in-range.xml");
        }
    }
}
